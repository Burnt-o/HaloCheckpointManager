#include "pch.h"
#include "GetShieldTris.h"
#include "fcl\geometry\geometric_shape_to_BVH_model.h"
#ifdef SHIELD_BUMPS

// shield SMTriangle vertices in the local coordinate space of the shield (ie where the origin is at it's base)
constexpr std::array<SMTriangle, 24> shieldTrisLocal =
{


SMTriangle{SimpleMath::Vector3(0.2171914428472519f, -0.041070278733968735f, 0.24026817083358765f), SimpleMath::Vector3(0.2171914279460907f, -0.0020623800810426474f, 0.42302367091178894f), SimpleMath::Vector3(0.0030024200677871704f,-0.03950117900967598f,0.2763771414756775f)},
SMTriangle{SimpleMath::Vector3(0.0030024200677871704f, -0.03950117900967598f, 0.2763771414756775f), SimpleMath::Vector3(0.2171914279460907f, -0.0020623800810426474f, 0.42302367091178894f), SimpleMath::Vector3(0.13537847995758057f,0.03648170828819275f,0.5900897979736328f)},
SMTriangle{SimpleMath::Vector3(0.0030024200677871704f, -0.03950117900967598f, 0.2763771414756775f), SimpleMath::Vector3(0.13537847995758057f, 0.03648170828819275f, 0.5900897979736328f), SimpleMath::Vector3(0.0030024098232388496f,0.05120418965816498f,0.6380512714385986f)},
SMTriangle{SimpleMath::Vector3(0.0030024200677871704f, -0.03950117900967598f, 0.2763771414756775f), SimpleMath::Vector3(0.0030024098232388496f, 0.05120418965816498f, 0.6380512714385986f), SimpleMath::Vector3(-0.129373699426651f,0.03648170828819275f,0.5900897979736328f)},
SMTriangle{SimpleMath::Vector3(0.0030024200677871704f, -0.03950117900967598f, 0.2763771414756775f), SimpleMath::Vector3(-0.129373699426651f, 0.03648170828819275f, 0.5900897979736328f), SimpleMath::Vector3(-0.21118661761283875f,-0.0020624599419534206f,0.42302364110946655f)},
SMTriangle{SimpleMath::Vector3(0.0030024200677871704f, -0.03950117900967598f, 0.2763771414756775f), SimpleMath::Vector3(-0.21118661761283875f, -0.0020624599419534206f, 0.42302364110946655f), SimpleMath::Vector3(-0.21118657290935516f,-0.041070278733968735f,0.24026811122894287f)},
SMTriangle{SimpleMath::Vector3(0.2171914428472519f, -0.041070278733968735f, 0.24026817083358765f), SimpleMath::Vector3(0.3408212661743164f, -0.011338159441947937f, 0.20855358242988586f), SimpleMath::Vector3(0.3394733667373657f,0.05835342779755592f,0.4660945534706116f)},
SMTriangle{SimpleMath::Vector3(0.2171914428472519f, -0.041070278733968735f, 0.24026817083358765f), SimpleMath::Vector3(0.3394733667373657f, 0.05835342779755592f, 0.4660945534706116f), SimpleMath::Vector3(0.2171914279460907f,-0.0020623800810426474f,0.42302367091178894f)},
SMTriangle{SimpleMath::Vector3(0.2171914279460907f, -0.0020623800810426474f, 0.42302367091178894f), SimpleMath::Vector3(0.3394733667373657f, 0.05835342779755592f, 0.4660945534706116f), SimpleMath::Vector3(0.21095284819602966f,0.12071912735700607f,0.7341128587722778f)},
SMTriangle{SimpleMath::Vector3(0.2171914279460907f, -0.0020623800810426474f, 0.42302367091178894f), SimpleMath::Vector3(0.21095284819602966f, 0.12071912735700607f, 0.7341128587722778f), SimpleMath::Vector3(0.13537847995758057f,0.03648170828819275f,0.5900897979736328f)},
SMTriangle{SimpleMath::Vector3(0.13537847995758057f, 0.03648170828819275f, 0.5900897979736328f), SimpleMath::Vector3(0.21095284819602966f, 0.12071912735700607f, 0.7341128587722778f), SimpleMath::Vector3(0.0030024098232388496f,0.14454054832458496f,0.8172000646591187f)},
SMTriangle{SimpleMath::Vector3(0.13537847995758057f, 0.03648170828819275f, 0.5900897979736328f), SimpleMath::Vector3(0.0030024098232388496f, 0.14454054832458496f, 0.8172000646591187f), SimpleMath::Vector3(0.0030024098232388496f,0.05120418965816498f,0.6380512714385986f)},
SMTriangle{SimpleMath::Vector3(0.0030024098232388496f, 0.05120418965816498f, 0.6380512714385986f), SimpleMath::Vector3(0.0030024098232388496f, 0.14454054832458496f, 0.8172000646591187f), SimpleMath::Vector3(-0.20494811236858368f,0.12071903795003891f,0.7341126799583435f)},
SMTriangle{SimpleMath::Vector3(0.0030024098232388496f, 0.05120418965816498f, 0.6380512714385986f), SimpleMath::Vector3(-0.20494811236858368f, 0.12071903795003891f, 0.7341126799583435f), SimpleMath::Vector3(-0.129373699426651f,0.03648170828819275f,0.5900897979736328f)},
SMTriangle{SimpleMath::Vector3(-0.129373699426651f, 0.03648170828819275f, 0.5900897979736328f), SimpleMath::Vector3(-0.20494811236858368f, 0.12071903795003891f, 0.7341126799583435f), SimpleMath::Vector3(-0.3334684669971466f,0.05835337191820145f,0.466094434261322f)},
SMTriangle{SimpleMath::Vector3(-0.129373699426651f, 0.03648170828819275f, 0.5900897979736328f), SimpleMath::Vector3(-0.3334684669971466f, 0.05835337191820145f, 0.466094434261322f), SimpleMath::Vector3(-0.21118661761283875f,-0.0020624599419534206f,0.42302364110946655f)},
SMTriangle{SimpleMath::Vector3(-0.21118661761283875f, -0.0020624599419534206f, 0.42302364110946655f), SimpleMath::Vector3(-0.3334684669971466f, 0.05835337191820145f, 0.466094434261322f), SimpleMath::Vector3(-0.3348163068294525f,-0.011338239535689354f,0.2085534632205963f)},
SMTriangle{SimpleMath::Vector3(-0.21118661761283875f, -0.0020624599419534206f, 0.42302364110946655f), SimpleMath::Vector3(-0.3348163068294525f, -0.011338239535689354f, 0.2085534632205963f), SimpleMath::Vector3(-0.21118657290935516f,-0.041070278733968735f,0.24026811122894287f)},
SMTriangle{SimpleMath::Vector3(-0.21118657290935516f, -0.041070278733968735f, 0.24026811122894287f), SimpleMath::Vector3(-0.3348163068294525f, -0.011338239535689354f, 0.2085534632205963f), SimpleMath::Vector3(-0.2806774377822876f,-0.0379367470741272f,0.10168127715587616f)},
SMTriangle{SimpleMath::Vector3(-0.21118657290935516f, -0.041070278733968735f, 0.24026811122894287f), SimpleMath::Vector3(-0.2806774377822876f, -0.0379367470741272f, 0.10168127715587616f), SimpleMath::Vector3(0.003002449870109558f,-0.04055127128958702f,0.0052331602200865746f)},
SMTriangle{SimpleMath::Vector3(-0.21118657290935516f, -0.041070278733968735f, 0.24026811122894287f), SimpleMath::Vector3(0.003002449870109558f, -0.04055127128958702f, 0.0052331602200865746f), SimpleMath::Vector3(0.0030024200677871704f,-0.03950117900967598f,0.2763771414756775f)},
SMTriangle{SimpleMath::Vector3(0.0030024200677871704f, -0.03950117900967598f, 0.2763771414756775f), SimpleMath::Vector3(0.003002449870109558f, -0.04055127128958702f, 0.0052331602200865746f), SimpleMath::Vector3(0.2171914428472519f,-0.041070278733968735f,0.24026817083358765f)},
SMTriangle{SimpleMath::Vector3(0.2171914428472519f, -0.041070278733968735f, 0.24026817083358765f), SimpleMath::Vector3(0.003002449870109558f, -0.04055127128958702f, 0.0052331602200865746f), SimpleMath::Vector3(0.2866823375225067f,-0.0379367470741272f,0.10168127715587616f)},
SMTriangle{SimpleMath::Vector3(0.2171914428472519f, -0.041070278733968735f, 0.24026817083358765f), SimpleMath::Vector3(0.2866823375225067f, -0.0379367470741272f, 0.10168127715587616f), SimpleMath::Vector3(0.3408212661743164f,-0.011338159441947937f,0.20855358242988586f)},

	
	/*

SMTriangle{SimpleMath::Vector3(0.7402346730232239f, 0.004656614735722542f, 0.5010879039764404f), SimpleMath::Vector3(0.7402346134185791f, 0.00023383596271742135f, 0.8822310566902161f), SimpleMath::Vector3(0.010232887230813503f,0.004478707443922758f,0.5763944387435913f)},
SMTriangle{SimpleMath::Vector3(0.010232887230813503f, 0.004478707443922758f, 0.5763944387435913f), SimpleMath::Vector3(0.7402346134185791f, 0.00023383596271742135f, 0.8822310566902161f), SimpleMath::Vector3(0.4613986611366272f,-0.00413635466247797f,1.2306535243988037f)},
SMTriangle{SimpleMath::Vector3(0.010232887230813503f, 0.004478707443922758f, 0.5763944387435913f), SimpleMath::Vector3(0.4613986611366272f, -0.00413635466247797f, 1.2306535243988037f), SimpleMath::Vector3(0.010232852771878242f,-0.005805613473057747f,1.3306788206100464f)},
SMTriangle{SimpleMath::Vector3(0.010232887230813503f, 0.004478707443922758f, 0.5763944387435913f), SimpleMath::Vector3(0.010232852771878242f, -0.005805613473057747f, 1.3306788206100464f), SimpleMath::Vector3(-0.44093313813209534f,-0.00413635466247797f,1.2306535243988037f)},
SMTriangle{SimpleMath::Vector3(0.010232887230813503f, 0.004478707443922758f, 0.5763944387435913f), SimpleMath::Vector3(-0.44093313813209534f, -0.00413635466247797f, 1.2306535243988037f), SimpleMath::Vector3(-0.7197689414024353f,0.00023384504311252385f,0.8822309970855713f)},
SMTriangle{SimpleMath::Vector3(0.010232887230813503f, 0.004478707443922758f, 0.5763944387435913f), SimpleMath::Vector3(-0.7197689414024353f, 0.00023384504311252385f, 0.8822309970855713f), SimpleMath::Vector3(-0.7197688221931458f,0.004656614735722542f,0.5010877847671509f)},
SMTriangle{SimpleMath::Vector3(0.7402346730232239f, 0.004656614735722542f, 0.5010879039764404f), SimpleMath::Vector3(1.1615914106369019f, 0.0012855387758463621f, 0.4349459707736969f), SimpleMath::Vector3(1.1569974422454834f,-0.00661620544269681f,0.9720569252967834f)},
SMTriangle{SimpleMath::Vector3(0.7402346730232239f, 0.004656614735722542f, 0.5010879039764404f), SimpleMath::Vector3(1.1569974422454834f, -0.00661620544269681f, 0.9720569252967834f), SimpleMath::Vector3(0.7402346134185791f,0.00023383596271742135f,0.8822310566902161f)},
SMTriangle{SimpleMath::Vector3(0.7402346134185791f, 0.00023383596271742135f, 0.8822310566902161f), SimpleMath::Vector3(1.1569974422454834f, -0.00661620544269681f, 0.9720569252967834f), SimpleMath::Vector3(0.7189722061157227f,-0.01368732936680317f,1.5310187339782715f)},
SMTriangle{SimpleMath::Vector3(0.7402346134185791f, 0.00023383596271742135f, 0.8822310566902161f), SimpleMath::Vector3(0.7189722061157227f, -0.01368732936680317f, 1.5310187339782715f), SimpleMath::Vector3(0.4613986611366272f,-0.00413635466247797f,1.2306535243988037f)},
SMTriangle{SimpleMath::Vector3(0.4613986611366272f, -0.00413635466247797f, 1.2306535243988037f), SimpleMath::Vector3(0.7189722061157227f, -0.01368732936680317f, 1.5310187339782715f), SimpleMath::Vector3(0.010232852771878242f,-0.016388239338994026f,1.7043001651763916f)},
SMTriangle{SimpleMath::Vector3(0.4613986611366272f, -0.00413635466247797f, 1.2306535243988037f), SimpleMath::Vector3(0.010232852771878242f, -0.016388239338994026f, 1.7043001651763916f), SimpleMath::Vector3(0.010232852771878242f,-0.005805613473057747f,1.3306788206100464f)},
SMTriangle{SimpleMath::Vector3(0.010232852771878242f, -0.005805613473057747f, 1.3306788206100464f), SimpleMath::Vector3(0.010232852771878242f, -0.016388239338994026f, 1.7043001651763916f), SimpleMath::Vector3(-0.6985068321228027f,-0.013687318190932274f,1.5310183763504028f)},
SMTriangle{SimpleMath::Vector3(0.010232852771878242f, -0.005805613473057747f, 1.3306788206100464f), SimpleMath::Vector3(-0.6985068321228027f, -0.013687318190932274f, 1.5310183763504028f), SimpleMath::Vector3(-0.44093313813209534f,-0.00413635466247797f,1.2306535243988037f)},
SMTriangle{SimpleMath::Vector3(-0.44093313813209534f, -0.00413635466247797f, 1.2306535243988037f), SimpleMath::Vector3(-0.6985068321228027f, -0.013687318190932274f, 1.5310183763504028f), SimpleMath::Vector3(-1.1365315914154053f,-0.0066161989234387875f,0.9720566868782043f)},
SMTriangle{SimpleMath::Vector3(-0.44093313813209534f, -0.00413635466247797f, 1.2306535243988037f), SimpleMath::Vector3(-1.1365315914154053f, -0.0066161989234387875f, 0.9720566868782043f), SimpleMath::Vector3(-0.7197689414024353f,0.00023384504311252385f,0.8822309970855713f)},
SMTriangle{SimpleMath::Vector3(-0.7197689414024353f, 0.00023384504311252385f, 0.8822309970855713f), SimpleMath::Vector3(-1.1365315914154053f, -0.0066161989234387875f, 0.9720566868782043f), SimpleMath::Vector3(-1.1411253213882446f,0.0012855477398261428f,0.4349457323551178f)},
SMTriangle{SimpleMath::Vector3(-0.7197689414024353f, 0.00023384504311252385f, 0.8822309970855713f), SimpleMath::Vector3(-1.1411253213882446f, 0.0012855477398261428f, 0.4349457323551178f), SimpleMath::Vector3(-0.7197688221931458f,0.004656614735722542f,0.5010877847671509f)},
SMTriangle{SimpleMath::Vector3(-0.7197688221931458f, 0.004656614735722542f, 0.5010877847671509f), SimpleMath::Vector3(-1.1411253213882446f, 0.0012855477398261428f, 0.4349457323551178f), SimpleMath::Vector3(-0.9566084146499634f,0.004301329143345356f,0.21205995976924896f)},
SMTriangle{SimpleMath::Vector3(-0.7197688221931458f, 0.004656614735722542f, 0.5010877847671509f), SimpleMath::Vector3(-0.9566084146499634f, 0.004301329143345356f, 0.21205995976924896f), SimpleMath::Vector3(0.010232987813651562f,0.004597768187522888f,0.010913943871855736f)},
SMTriangle{SimpleMath::Vector3(-0.7197688221931458f, 0.004656614735722542f, 0.5010877847671509f), SimpleMath::Vector3(0.010232987813651562f, 0.004597768187522888f, 0.010913943871855736f), SimpleMath::Vector3(0.010232887230813503f,0.004478707443922758f,0.5763944387435913f)},
SMTriangle{SimpleMath::Vector3(0.010232887230813503f, 0.004478707443922758f, 0.5763944387435913f), SimpleMath::Vector3(0.010232987813651562f, 0.004597768187522888f, 0.010913943871855736f), SimpleMath::Vector3(0.7402346730232239f,0.004656614735722542f,0.5010879039764404f)},
SMTriangle{SimpleMath::Vector3(0.7402346730232239f, 0.004656614735722542f, 0.5010879039764404f), SimpleMath::Vector3(0.010232987813651562f, 0.004597768187522888f, 0.010913943871855736f), SimpleMath::Vector3(0.9770744442939758f,0.004301329143345356f,0.21205995976924896f)},
SMTriangle{SimpleMath::Vector3(0.7402346730232239f, 0.004656614735722542f, 0.5010879039764404f), SimpleMath::Vector3(0.9770744442939758f, 0.004301329143345356f, 0.21205995976924896f), SimpleMath::Vector3(1.1615914106369019f,0.0012855387758463621f,0.4349459707736969f)}*/
};




std::array< SMTriangle, 24> transformShieldTrisToWorld()
{

	std::array< SMTriangle, 24> out;

	for (int i = 0; i < shieldTrisLocal.size(); i++)
	{
		PLOG_DEBUG << i;
		SMTriangle transformedTri = shieldTrisLocal.at(i);
		
		// transform rotation in local space

		// in halo, pitch is around y axis, yaw around z axis, and roll around x axis.
		// our shieldRotation xyz correspondws to yaw-pitch-roll. 
		// also so for some fucking reason we need to invert the pitch axis, idk what's going on there.
		SimpleMath::Matrix rotQuat1 = SimpleMath::Matrix::CreateFromAxisAngle(SimpleMath::Vector3::UnitZ, shieldRotation.x); 
		SimpleMath::Matrix rotQuat2 = SimpleMath::Matrix::CreateFromAxisAngle(SimpleMath::Vector3::UnitY, -shieldRotation.y);
		SimpleMath::Matrix rotQuat3 = SimpleMath::Matrix::CreateFromAxisAngle(SimpleMath::Vector3::UnitX, shieldRotation.z);

		for (auto& vert : transformedTri)
		{
			vert = SimpleMath::Vector3::Transform(vert, rotQuat1);
			vert = SimpleMath::Vector3::Transform(vert, rotQuat2);
			vert = SimpleMath::Vector3::Transform(vert, rotQuat3);
		}


		// transform position to world space
		SimpleMath::Matrix translationMatrix = SimpleMath::Matrix::CreateTranslation(shieldPosition); // todo: check if this is going the opposite of correct direction
		for (auto& vert : transformedTri)
		{
			vert = SimpleMath::Vector3::Transform(vert, translationMatrix); 

		}

		out.at(i) = transformedTri;
	}
	PLOG_DEBUG << "finished generating shield tris";
	return out;
}


const std::array< SMTriangle, 24>& getShieldTris()
{
	static std::optional<std::array<SMTriangle, 24>> shieldTrisWorld;
	if (shieldTrisWorld.has_value() == false)
	{
		PLOG_DEBUG << "generating shield tris world";
		shieldTrisWorld = transformShieldTrisToWorld();
	}


	return shieldTrisWorld.value();
}


//using namespace fcl;
//
//
//
//CollisionObjectf* shieldModel = nullptr;
//
//CollisionObjectf* getShieldCollisionModel()
//{
//	if (!shieldModel)
//	{
//		std::vector<Triangle> shieldTrisWorldFCL = {};
//		 std::vector<Vector3f> shieldVertsWorldFCL = {};
//
//
//		PLOG_DEBUG << "generating shield tris world";
//		for (int i = 0; i < shieldTrisLocal.size(); i++)
//		{
//			PLOG_DEBUG << i;
//			SMTriangle transformedTri = shieldTrisLocal.at(i);
//
//			// transform rotation in local space
//
//			// in halo, pitch is around y axis, yaw around z axis, and roll around x axis.
//			// our shieldRotation xyz correspondws to yaw-pitch-roll. 
//			// also so for some fucking reason we need to invert the pitch axis, idk what's going on there.
//			SimpleMath::Matrix rotQuat1 = SimpleMath::Matrix::CreateFromAxisAngle(SimpleMath::Vector3::UnitZ, shieldRotation.x);
//			SimpleMath::Matrix rotQuat2 = SimpleMath::Matrix::CreateFromAxisAngle(SimpleMath::Vector3::UnitY, -shieldRotation.y);
//			SimpleMath::Matrix rotQuat3 = SimpleMath::Matrix::CreateFromAxisAngle(SimpleMath::Vector3::UnitX, shieldRotation.z);
//
//			for (auto& vert : transformedTri)
//			{
//				vert = SimpleMath::Vector3::Transform(vert, rotQuat1);
//				vert = SimpleMath::Vector3::Transform(vert, rotQuat2);
//				vert = SimpleMath::Vector3::Transform(vert, rotQuat3);
//			}
//
//
//			// transform position to world space
//			SimpleMath::Matrix translationMatrix = SimpleMath::Matrix::CreateTranslation(shieldPosition); // todo: check if this is going the opposite of correct direction
//			for (auto& vert : transformedTri)
//			{
//				vert = SimpleMath::Vector3::Transform(vert, translationMatrix);
//
//			}
//
//			for (auto& vert : transformedTri)
//			{
//				shieldVertsWorldFCL.push_back({vert.x, vert.y, vert.z});
//			}
//
//			int triIndex = i * 3;
//			shieldTrisWorldFCL.push_back(Triangle(triIndex, triIndex + 1, triIndex + 2));
//		}
//
//		typedef BVHModel<OBBRSSf> Model;
//		std::shared_ptr<Model> geom = std::make_shared<Model>();
//		// add the mesh data into the BVHModel structure
//
//		geom->beginModel();
//		geom->addSubModel(shieldVertsWorldFCL, shieldTrisWorldFCL);
//		geom->endModel();
//
//		shieldModel = new CollisionObjectf(geom, Transform3f::Identity());
//	}
//
//
//	return shieldModel;
//}




#endif